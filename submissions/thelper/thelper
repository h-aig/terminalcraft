#!/usr/bin/env python3

import argparse
from google import genai
from google.genai import types
import json
import os
import pyperclip
import inquirer
import json
import sys
import time 


def validate_non_empty(answers, current):
    if not current:
        raise inquirer.errors.ValidationError('', reason='This field is required')
    return True

def get_user_input():
    questions = [
        inquirer.Text('api_key', message="Please enter your API key", validate=validate_non_empty),
        inquirer.List('model',
                      message="Please select the model you want",
                      choices=['gemini-1.5-flash', 'gemini-1.5-flash-8b', 'gemini-2.0-flash','gemini-2.0-flash-lite'],
                      carousel=True,
                      default='Gemini 1.5 Flash'),
        inquirer.Text('desktop_os', message="Please enter your OS (be specific eg- Debian 12, Windows 11, etc)", validate=validate_non_empty),
        inquirer.Text('max_token', message="Please enter the max output token value", default='100', validate=validate_non_empty),
        inquirer.Confirm('confirm', message="Confirm?")
    ]

    answers = inquirer.prompt(questions)
    return answers

# Get the parent directory of the current script
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
settings_path = os.path.join(parent_dir, 'settings.json')

# Check if settings.json exists in the parent directory
if not os.path.exists(settings_path):
    print("Settings file not found, initializing setup...")
    user_input = get_user_input()
    settings = {
        "api_key": user_input['api_key'],
        "model": user_input['model'],
        "desktop_os": user_input['desktop_os'],
        "max_token": user_input['max_token'],
        "prompt": f"You are a helpful assistant that helps users with problems regarding {user_input['desktop_os']} terminal commands and {user_input['desktop_os']} commands in general. You should always aim to give the most accurate and helpful response to the user's query and to also always respond as short as possible. Aim to provide user with the relavant command that solves their problem. Format the response but never respond in markdown, you are a tool that prints in terminal where markdown is not supported."
    }
    with open(settings_path, 'w') as settings_file:
        json.dump(settings, settings_file, indent=4)
    print("User settings have been saved to settings.json")
    sys.exit()

# Load settings.json from the parent directory
with open(settings_path) as f:
    settings = json.load(f)

client = genai.Client(api_key=settings["api_key"])

# Model settings
chat = client.chats.create(
    model=settings["model"],
    config=types.GenerateContentConfig(
        max_output_tokens=settings["max_token"],
        system_instruction=settings["prompt"],
    )
)

def print_boxed_text(text):
    lines = text.split('\n')
    max_length = max(len(line) for line in lines)
    print("\n+" + "-" * (max_length + 2) + "+")
    print("| " + " " * max_length + " |")  # Add an empty line at the top
    for line in lines:
        print("| " + line.ljust(max_length) + " |")
    print("+" + "-" * (max_length + 2) + "+")
    print()  # Add an extra empty line after the box

def query(input_text, copy_to_clipboard=False):
    response = chat.send_message_stream(input_text)
    response_text = ""
    for chunk in response:
        response_text += chunk.text
    print_boxed_text(response_text)
    if copy_to_clipboard:
        pyperclip.copy(response_text)
        print("Response copied to clipboard.")

def main():
    parser = argparse.ArgumentParser(description="A CLI tool that uses Google's Gemini API to help with terminal commands")
    parser.add_argument('text', type=str, nargs='*', help='Sends query to the model')
    parser.add_argument('-i', '--init', action='store_true', help='Initialize setup')
    parser.add_argument('-s', '--settings', action='store_true', help='Print settings information')
    parser.add_argument('-e', '--error', action='store_true', help='Sends the error message to the model')
    parser.add_argument('-c', '--clipboard', action='store_true', help='Copies the command output to the clipboard')
    args = parser.parse_args()

    if args.init:
        os.system('python setup.py')

    if args.settings:
        print(f"API Key: {settings['api_key']}")
        print(f"Model: {settings['model']}")
        print(f"Desktop OS: {settings['desktop_os']}")
        print(f"Max Token: {settings['max_token']}")
        print(f"Prompt: {settings['prompt']}")

    if args.error:
        clipboard_content = pyperclip.paste()
        query(f"Help i got this error: {clipboard_content}", copy_to_clipboard=args.clipboard)

    if args.clipboard:
        input_text = 'Respond with only the specific command required to solve the issue. DO NOT GIVE ANY EXTRA INFORMATION, JUST WRITE THE COMMAND'.join(args.text)
        query(input_text, copy_to_clipboard=True)

    else:
        input_text = ' '.join(args.text)
        query(input_text, copy_to_clipboard=False)

if __name__ == "__main__":
    main()